import React, { createContext, useContext, useEffect, useState } from 'react';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  onAuthStateChanged,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
} from 'firebase/auth';

// üîë Firebase project-er config (eta ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá)
const firebaseConfig = {
  apiKey: "AIzaSyBoKxw28d2xNJdw7m0wgz2Sm-jFjzkKb0E",
  authDomain: "mess-manager-8d276.firebaseapp.com",
  projectId: "mess-manager-8d276",
  storageBucket: "mess-manager-8d276.appspot.com",
  messagingSenderId: "687932786280",
  appId: "1:687932786280:web:41b175fe011544b3279ddd",
  measurementId: "G-LBQXTVB9SY"
};

// üî• ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ initialize ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡ßã
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);

// üîí Context setup
const AuthContext = createContext();

// üëá Context use korar shortcut
export function useFirebaseAuth() {
  return useContext(AuthContext);
}

// üåü Provider function, ‡¶è‡¶á‡¶ü‡¶æ ‡¶¶‡¶ø‡ßü‡ßá‡¶á app ‡¶ò‡¶ø‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá
export function FirebaseAuthProvider({ children }) {
  const [user, setUser] = useState(null); // ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá
  const [loading, setLoading] = useState(true); // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶ö‡¶≤‡¶¨‡ßá

  useEffect(() => {
    // firebase ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡ßá‡¶¨‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser); // ‡¶•‡¶æ‡¶ï‡¶≤‡ßá user set ‡¶π‡¶¨‡ßá, ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá null
      setLoading(false);    // ‡¶ö‡ßá‡¶ï ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç false
    });
    // ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
    return () => unsubscribe();
  }, []);

  // ‡¶≤‡¶ó‡¶á‡¶®/‡¶∏‡¶æ‡¶á‡¶®‡¶Ü‡¶™/‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  const signup = (email, password) => createUserWithEmailAndPassword(auth, email, password);
  const signin = (email, password) => signInWithEmailAndPassword(auth, email, password);
  const signout = () => signOut(auth);

  // ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ñ‡¶®‡ßã user ‡¶ö‡ßá‡¶ï ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶§‡¶ñ‡¶® "‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
  if (loading) return <div>‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>;

  // ‡¶™‡ßÅ‡¶∞‡ßã app-‡¶è user, signup, signin, signout ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø available ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
  return (
    <AuthContext.Provider value={{ user, signup, signin, signout }}>
      {children}
    </AuthContext.Provider>
  );
}
