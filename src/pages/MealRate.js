import React, { useEffect, useState } from 'react';
import {
  getFirestore,
  collection,
  getDocs,
} from 'firebase/firestore';
import { useMonth } from '../context/MonthContext';

const db = getFirestore();

export default function MealRate() {
  const [members, setMembers] = useState([]);
  const [meals, setMeals] = useState([]);
  const [bazars, setBazars] = useState([]);
  const [mealRate, setMealRate] = useState(0);
  const [memberMeals, setMemberMeals] = useState({});
  const [distributedCost, setDistributedCost] = useState({});
  const { currentMonth } = useMonth();

  useEffect(() => {
    const fetchAll = async () => {
      // Member load
      const memberSnap = await getDocs(collection(db, 'members'));
      const memberData = memberSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setMembers(memberData);

      // Meals load (month wise)
      const mealSnap = await getDocs(collection(db, 'meals'));
      const allMealData = mealSnap.docs.map(doc => doc.data());
      const filteredMeals = allMealData.filter(m => m.monthId === currentMonth);
      setMeals(filteredMeals);

      // Bazar load (month wise)
      const bazarSnap = await getDocs(collection(db, 'bazar'));
      const allBazarData = bazarSnap.docs.map(doc => doc.data());
      const filteredBazars = allBazarData.filter(b => b.monthId === currentMonth);
      setBazars(filteredBazars);

      // Calculation
      let totalMeals = 0;
      const memberMealCount = {};

      filteredMeals.forEach((day) => {
        Object.entries(day.meals).forEach(([memberId, meal]) => {
          const total = Number(meal.breakfast || 0) + Number(meal.lunch || 0) + Number(meal.dinner || 0);
          totalMeals += total;
          memberMealCount[memberId] = (memberMealCount[memberId] || 0) + total;
        });
      });

      const totalBazarCost = filteredBazars.reduce((sum, b) => sum + Number(b.amount), 0);

      // Exact meal rate (decimal рж╕рж╣)
      const exactMealRate = totalMeals > 0 ? totalBazarCost / totalMeals : 0;

      // Member-wise exact meal cost (decimal рж╕рж╣)
      const costs = memberData.map(m => ({
        id: m.id,
        name: m.name,
        mealCount: memberMealCount[m.id] || 0,
        exactCost: (memberMealCount[m.id] || 0) * exactMealRate,
      }));

      // Step 1: ржкрзНрж░рждрж┐ржЯрж╛ member ржПрж░ cost ржХрзЗ floor (ржирзАржЪрзЗрж░ integer) ржХрж░рж┐
      const flooredCosts = costs.map(c => ({
        ...c,
        floorCost: Math.floor(c.exactCost),
        decimal: c.exactCost - Math.floor(c.exactCost),
      }));

      // Step 2: Total floor cost ржпрзЛржЧ ржХрж░рж┐
      const totalFloorCost = flooredCosts.reduce((sum, c) => sum + c.floorCost, 0);

      // Step 3: Total bazar - total floor cost = ржмрж╛ржХрж┐ ржЯрж╛ржХрж╛ (adjustable)
      let remaining = Math.round(totalBazarCost - totalFloorCost);

      // Step 4: ржХрж╛рж░рж╛ рзз ржЯрж╛ржХрж╛ ржмрзЗрж╢рж┐ ржкрж╛ржмрзЗ ржарж┐ржХ ржХрж░рж┐ (ржмрж╛ржХрж┐ ржЯрж╛ржХрж╛ ржпрждржЬржи ржжрж░ржХрж╛рж░, рждрждржЬржи)
      // рж╕ржмрж╛рж░ decimal ржЕржВрж╢ ржмрзЗрж╢рж┐ ржпрж╛ржжрзЗрж░, рждрж╛рж░рж╛ ржЖржЧрзЗ ржмрзЗрж╢рж┐ ржкрж╛ржмрзЗ тАФ ржпрж╛рждрзЗ ржмржгрзНржЯржи ржПржХржжржо ржирзНржпрж╛ржпрзНржп рж╣рзЯ!
      const sortedByDecimal = [...flooredCosts].sort((a, b) => b.decimal - a.decimal);

      // Step 5: Distributed cost ржмрж╛ржирж╛ржЗ
      const distributed = {};
      sortedByDecimal.forEach((c, idx) => {
        // ржпрж╛рж░рж╛ extra рзз ржЯрж╛ржХрж╛ ржкрж╛ржмрзЗ, рждрж╛ржжрзЗрж░ ржЬржирзНржп
        distributed[c.id] = c.floorCost + (idx < remaining ? 1 : 0);
      });

      setMealRate(Math.round(exactMealRate)); // рж░рзЗржЯ ржжрзЗржЦрж╛рждрзЗ ржЪрж╛ржЗрж▓рзЗ integer ржжрзЗржЦрж╛ржУ (ржЪрж╛ржЗрж▓рзЗ ржжрж╢ржорж┐ржХржУ ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░рзЛ)
      setMemberMeals(memberMealCount);
      setDistributedCost(distributed);
    };

    if (currentMonth) {
      fetchAll();
    }
  }, [currentMonth]);

  // ржорзЛржЯ ржмрж╛ржЬрж╛рж░, ржорзЛржЯ ржорж┐рж▓ тАФ integer
  const totalBazarInt = Math.round(bazars.reduce((sum, b) => sum + Number(b.amount), 0));
  const totalMealInt = Object.values(memberMeals).reduce((sum, m) => sum + m, 0);

  // рж╕рж░рзНржмржорзЛржЯ cost (sum of all member distributed cost) == total bazar, always!
  const totalCost = Object.values(distributedCost).reduce((sum, c) => sum + c, 0);

  return (
    <div>
      <h2>ЁЯУК ржорж┐рж▓ рж░рзЗржЯ рж╣рж┐рж╕рж╛ржм</h2>
      <p>ЁЯУЕ ржорж╛рж╕: <strong>{currentMonth}</strong></p>
      <p>ржорзЛржЯ ржмрж╛ржЬрж╛рж░ ржЦрж░ржЪ: <strong>{totalBazarInt} ржЯрж╛ржХрж╛</strong></p>
      <p>ржорзЛржЯ ржорж┐рж▓ рж╕ржВржЦрзНржпрж╛: <strong>{totalMealInt} ржЯрж┐</strong></p>
      <p>ржкрзНрж░рждрж┐ ржорж┐рж▓ рж░рзЗржЯ: <strong>{mealRate} ржЯрж╛ржХрж╛</strong></p>
      <h3>ржорзЗржорзНржмрж╛рж░ ржЕржирзБржпрж╛ржпрж╝рзА рж╣рж┐рж╕рж╛ржм:</h3>
      <ul>
        {members.map(m => (
          <li key={m.id}>
            ЁЯСд {m.name} тАФ ЁЯН╜я╕П {memberMeals[m.id] || 0} ржорж┐рж▓ тАФ ЁЯТ░ {distributedCost[m.id] || 0} ржЯрж╛ржХрж╛
          </li>
        ))}
      </ul>
      <p style={{color:'gray'}}>
        <b>ржирзЛржЯ:</b> рж╕ржм ржХрж╕рзНржЯ ржпрзЛржЧ ржХрж░рж▓рзЗ ржорзЛржЯ ржмрж╛ржЬрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржПржХржжржо ржорж┐рж▓ржмрзЗред  
        ржХрж╛рж░рзЛ ржХрж╕рзНржЯ рзз ржЯрж╛ржХрж╛ ржмрзЗрж╢рж┐ ржмрж╛ ржХржо ржерж╛ржХрж▓рзЗржУ, рж╕ржмрж╛ржЗржХрзЗ ржПржХржжржо рж╕ржорж╛ржиржнрж╛ржмрзЗ ржнрж╛ржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
      </p>
      <p style={{color: 'green'}}>
        <b>ржорзЛржЯ ржХрж╕рзНржЯ ржпрзЛржЧржлрж▓:</b> {totalCost} ржЯрж╛ржХрж╛ (ржПржХржжржо рж╕ржарж┐ржХ)
      </p>
    </div>
  );
}
