import React, { useEffect, useState } from 'react';
import { getFirestore, collection, getDocs } from 'firebase/firestore';
import { useMonth } from '../context/MonthContext';

const db = getFirestore();

export default function Report() {
  const { currentMonth } = useMonth();
  const [members, setMembers] = useState([]);
  const [meals, setMeals] = useState([]);
  const [bazars, setBazars] = useState([]);
  const [deposits, setDeposits] = useState([]);
  const [mealRate, setMealRate] = useState(0);
  const [memberMeals, setMemberMeals] = useState({});
  const [distributedCost, setDistributedCost] = useState({});

  useEffect(() => {
    const fetchAll = async () => {
      const memberSnap = await getDocs(collection(db, 'members'));
      const memberData = memberSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setMembers(memberData);

      const mealSnap = await getDocs(collection(db, 'meals'));
      const mealsData = mealSnap.docs.map(doc => doc.data()).filter(m => m.monthId === currentMonth);
      setMeals(mealsData);

      const bazarSnap = await getDocs(collection(db, 'bazar'));
      const bazarData = bazarSnap.docs.map(doc => doc.data()).filter(b => b.monthId === currentMonth);
      setBazars(bazarData);

      const depositSnap = await getDocs(collection(db, 'deposits'));
      const depositData = depositSnap.docs.map(doc => doc.data()).filter(d => d.monthId === currentMonth);
      setDeposits(depositData);

      let totalMeals = 0;
      const memberMealCount = {};
      mealsData.forEach(day => {
        Object.entries(day.meals).forEach(([memberId, meal]) => {
          const total = Number(meal.breakfast || 0) + Number(meal.lunch || 0) + Number(meal.dinner || 0);
          totalMeals += total;
          memberMealCount[memberId] = (memberMealCount[memberId] || 0) + total;
        });
      });
      setMemberMeals(memberMealCount);

      const totalBazarCost = bazarData.reduce((sum, b) => sum + Number(b.amount), 0);
      const exactMealRate = totalMeals > 0 ? totalBazarCost / totalMeals : 0;

      const costs = memberData.map(m => ({
        id: m.id,
        name: m.name,
        mealCount: memberMealCount[m.id] || 0,
        exactCost: (memberMealCount[m.id] || 0) * exactMealRate,
      }));

      const flooredCosts = costs.map(c => ({
        ...c,
        floorCost: Math.floor(c.exactCost),
        decimal: c.exactCost - Math.floor(c.exactCost),
      }));

      const totalFloorCost = flooredCosts.reduce((sum, c) => sum + c.floorCost, 0);
      let remaining = Math.round(totalBazarCost - totalFloorCost);
      const sortedByDecimal = [...flooredCosts].sort((a, b) => b.decimal - a.decimal);
      const distributed = {};
      sortedByDecimal.forEach((c, idx) => {
        distributed[c.id] = c.floorCost + (idx < remaining ? 1 : 0);
      });

      setMealRate(Math.round(exactMealRate));
      setDistributedCost(distributed);
    };

    if (currentMonth) {
      fetchAll();
    }
  }, [currentMonth]);

  const memberReports = members.map(m => {
    const totalBazar = bazars.filter(b => b.person === m.name).reduce((sum, b) => sum + Number(b.amount), 0);
    const totalDeposit = deposits.filter(d => d.member === m.name).reduce((sum, d) => sum + Number(d.amount), 0) + totalBazar;
    const mealCost = distributedCost[m.id] || 0;
    const balance = totalDeposit - mealCost;

    return {
      name: m.name,
      totalMeal: memberMeals[m.id] || 0,
      totalDeposit,
      totalBazar,
      mealCost,
      balance,
    };
  });

  const totalDistributedCost = Object.values(distributedCost).reduce((sum, c) => sum + c, 0);

  return (
    <div>
      <h2>üìä ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ({currentMonth})</h2>
      <table border="1" cellPadding="8" style={{ borderCollapse: "collapse", minWidth: 600 }}>
        <thead>
          <tr>
            <th>‡¶®‡¶æ‡¶Æ</th>
            <th>‡¶Æ‡ßã‡¶ü ‡¶Æ‡¶ø‡¶≤</th>
            <th>‡¶Æ‡ßã‡¶ü ‡¶ú‡¶Æ‡¶æ</th>
            <th>‡¶Æ‡ßã‡¶ü ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ (‡¶á‡¶®‡¶´‡ßã)</th>
            <th>‡¶Æ‡¶ø‡¶≤ ‡¶ñ‡¶∞‡¶ö</th>
            <th>‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ (‡¶¨‡¶æ‡¶ï‡ßÄ/‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§)</th>
          </tr>
        </thead>
        <tbody>
          {memberReports.map(r => (
            <tr key={r.name}>
              <td>{r.name}</td>
              <td>{r.totalMeal}</td>
              <td>{r.totalDeposit} ‡¶ü‡¶æ‡¶ï‡¶æ</td>
              <td>{r.totalBazar} ‡¶ü‡¶æ‡¶ï‡¶æ</td>
              <td>{r.mealCost} ‡¶ü‡¶æ‡¶ï‡¶æ</td>
              <td style={{ color: r.balance < 0 ? "red" : "green", fontWeight: 'bold' }}>
                {r.balance < 0 ? `‡¶¨‡¶æ‡¶ï‡ßÄ: ${-r.balance} ‡¶ü‡¶æ‡¶ï‡¶æ` : `‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§: ${r.balance} ‡¶ü‡¶æ‡¶ï‡¶æ`}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <br />
      <p>
        <b>‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏:</b>
        <span style={{ color: 'red', marginLeft: 5 }}>‡¶¨‡¶æ‡¶ï‡ßÄ (‡¶®‡ßá‡¶ó‡ßá‡¶ü‡¶ø‡¶≠) = ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá</span>,
        <span style={{ color: 'green', marginLeft: 10 }}>‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ (‡¶™‡¶ú‡¶ø‡¶ü‡¶ø‡¶≠) = ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶¨‡ßá</span>
      </p>
      <p style={{color:'gray'}}>
        <b>‡¶®‡ßã‡¶ü:</b> ‡¶∏‡¶¨‡¶æ‡¶∞ meal cost ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶Æ‡¶ø‡¶≤‡¶¨‡ßá‡•§
        ‡¶ï‡ßá‡¶â ‡ßß ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø/‡¶ï‡¶Æ ‡¶™‡ßá‡¶≤‡ßá‡¶ì, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶®‡ßç‡¶Ø‡¶æ‡¶Ø‡ßç‡¶Ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
      </p>
      <p style={{color: 'green'}}>
        <b>‡¶Æ‡ßã‡¶ü ‡¶ï‡¶∏‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤:</b> {totalDistributedCost} ‡¶ü‡¶æ‡¶ï‡¶æ (‡¶è‡¶ï‡¶¶‡¶Æ ‡¶∏‡¶†‡¶ø‡¶ï)
      </p>
    </div>
  );
}
